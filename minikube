minikube 

gle Language 10.0.19043 Build 19043
* Automatically selected the docker driver
* Starting control plane node minikube in cluster minikube
* Pulling base image ...
* Downloading Kubernetes v1.21.2 preload ...
    > preloaded-images-k8s-v11-v1...: 502.14 MiB / 502.14 MiB  100.00% 4.35 MiB
    > gcr.io/k8s-minikube/kicbase...: 361.08 MiB / 361.09 MiB  100.00% 2.36 MiB


kubectl edit pod <pod_name>
kubectl replace -f <yaml_file>
kubectl scale --replicas=6 <label> <name_of_pod>

 kubectl get pods
    2  kubectl get replicaset
    3  kubectl describe replicaset
    4  kubectl get replicaset
    5  kubectl logs replicaset
    6  kubectl logs new-replica-set
    7  kubectl get replicaset
    8  kubectl get pods
    9  kubectl delete pod new-replica-set-6lvgk
   10  kubectl get pods
   11  kubectl describe pod new-replica-set-g46rd
   12  kubectl scale replicas=3 busybox-pod new-replica-set-g46rd
   13  kubectl scale --replicas=3 busybox-pod new-replica-set-g46rd
   14  kubectl scale --replicas=3
   15  kubectl scale --replicas=3 new-replica-set-g46rd
   16  kubectl scale --replicas=3 new-replica-set new-replica-set-g46rd
   17  kubectl scale --replicas=3 new-replica-set-g46rd
   18  kubectl delete pod new-replica-set-6lvgk
   19  kubectl get pods
   20  kubectl delete pod new-replica-set-g46rd
   21  ls
   22  vi replicaset-definition-1.yaml 
   23  kubectl create -f replicaset-definition-1.yaml 
   24  vi replicaset-definition-1.yaml 
   25  kubectl create -f replicaset-definition-1.yaml 
   26  kubectl get pods
   27  vi replicaset-definition-1.yaml 
   28  kubectl get pods
   29  vi replicaset-definition-2.yaml 
   30  kubectl create -f replicaset-definition-2.yaml 
   31  kubectl get pods
   32  vi replicaset-definition-2.yaml 
   33  kubectl get pods
   34  kubectl get replicaset
   35  kubectl delete replicaset replicaset-1 replicaset-2
   36  kubectl get replicaset
   37  kubectl get pods
   38  ls
   39  kubectl get replicaset
   40  vi sample.yaml 
   41  kubectl get pods
   42  kubectl edit pod new-replica-set-4tgcg
   43  kubectl get pods
   44  kubectl edit pod new-replica-set-g782
   45  kubectl edit pod new-replica-set-g78q2
   46  kubectl edit pod new-replica-set-m6t7c
   47  kubectl edit replicaset new-replica-set
   48  kubectl get pods
   49  kubectl edit pod new-replica-set-mgmgz
   50  kubectl get pods
   51  kubectl delete pod new-replica-set-4tgcg
   52  kubectl get pods
   53  kubectl scale --replicas=4
   54  kubectl scale --replicas=4 pods new-replica-set-4ncvt
   55  kubectl scale --replicas=4 new-replica-set
   56  kubectl describe replicaset 
   57  kubectl scale replicaset new-replica-set --replicas=4
   58  kubectl describe replicaset 
   59  kubectl scale replicaset new-replica-set --replicas=5
   60  kubectl describe replicaset 

   kubectl rollout 
   kubectl rollout undo
   kubectl rollout history <deployment> --record


terraform: 
	commands:
	  terraform init
   	  terraform plan
   	  terraform apply
   	  terraform show
   	  terraform state show <resource>.<name>
   	lifecycle: 
   		create_before_destroy  -> creates before destroying the resource
   		prevent_destroy 	-> prevents destroying the resource while creating new(some issue)
   		ignore_changes		-> ignore the changes made to file
   	depends_on: define dependency on other resource
   	tfstate: file that stores state of terraform in json format
   	tfvars: variable file to hold the variables which can be refered in tf file
   	tf: terraform config file
   		resource:
   		data: 
   		output:
   		reference variable/expression: -> applies to ouput and other resources. 
   										  response from another resource can be made dependent
   		count: number of items to be created, will create count times the defined reource
   		for_each: 
   			type = set(String)


AWS:
 IAM: Identity and Access Management


 20  kubectl get pods
   21  kubectl describe pods redis
   22  kubectl delete pod redis
   23  vi pod-definition.yml
   24  kubectl create -f pod-definition.yml 
   25  kubectl describe pods redis
   26  kubectl edit pod redis
   27  kubectl get pods
   28  kubectl describe pods redis


In any of the practical quizzes if you are asked to edit an existing POD, please note the following:

If you are given a pod definition file, edit that file and use it to create a new pod.
If you are not given a pod definition file, you may extract the definition to a file using the below command:
kubectl get pod <pod-name> -o yaml > pod-definition.yaml

Then edit the file to make the necessary changes, delete and re-create the pod.

Use the kubectl edit pod <pod-name> command to edit pod properties.

replicaset definition file
apps/v1
replicaset
spec:


kubectl edit replicaset <name>

kubectl scale --replicas=<num> replicaset(auto applied) <name>

kubectl delete pods (applies the changes made to replicas)


 20  kubectl get pods
   21  kubectl describe pods redis
   22  kubectl delete pod redis
   23  vi pod-definition.yml
   24  kubectl create -f pod-definition.yml 
   25  kubectl describe pods redis
   26  kubectl edit pod redis
   27  kubectl get pods
   28  kubectl describe pods redis


In any of the practical quizzes if you are asked to edit an existing POD, please note the following:

If you are given a pod definition file, edit that file and use it to create a new pod.
If you are not given a pod definition file, you may extract the definition to a file using the below command:
kubectl get pod <pod-name> -o yaml > pod-definition.yaml

Then edit the file to make the necessary changes, delete and re-create the pod.

Use the kubectl edit pod <pod-name> command to edit pod properties.

replicaset definition file
apps/v1
replicaset
spec:


kubectl edit replicaset <name>

kubectl scale --replicas=<num> replicaset(auto applied) <name>

kubectl delete pods (applies the changes made to replicas)




root@controlplane:~# kubectl run nginx-pod --image=nginx:alpine --dry-run=client  -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx-pod
  name: nginx-pod
spec:
  containers:
  - image: nginx:alpine
    name: nginx-pod
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}



----------------------------------

root@controlplane:~# history
    1  kubectl run nginx-pod --image=nginx:alpine --dry-run=client  -o yaml
    2  kubectl run nginx-pod --image=nginx:alpine
    3  kubectl run redis --image=redis:alpine -o yaml
    4  kubectl get pods
    5  kubectl delete pod redis
    6  kubectl run redis --image=redis:alpine --dry-run=client -o yaml > redis.yaml
    7  vi redis.yaml 
    8  kubectl apply -f redis.yaml 
    9  kubectl get pods
   10  kubectl describe pod redis
   11  kubectl edit redis
   12  kubectl edit pod redis
   13  kubectl describe pod redis
   14  kubectl expose pod redis --port=6379 --name redis-service
   15  kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3 --dry-run=client -o yaml > dep.yaml
   16  vi dep.yaml 
   17  kubectl apply -f dep.yaml 
   18  kubectl get pods
   19  kubectl create pod custom-nginx --image=nginx --port=8080
   20  kubectl create --help
   21  kubectl run custom-nginx --image=nginx --port=8080
   22  kubectl get pods
   23  kubectl describe pod custom-nginx
   24  kubectl get pods
   kubectl create deployment redis-deply --namespace=dev-ns --replicas=2 --image=redis --dry-run=client -o yaml > red-dep.yaml
   29  vi red-dep.yaml 
   30  kubectl apply -f red-dep.yaml 
   31  kubectl get pods
   32  kubectl get pods --namespace= dev-ns
   33  kubectl get pods --namespace=dev-ns
   34  kubectl get deployment
   35  kubectl get deployment --namespace=dev-ns
   36  kubectl get replicaset
   37  kubectl get replicaset --namespace=dev-ns
   38  kubectl edit redis-deply
   39  kubectl edit redis-deply --namespace=dev-ns
   40  kubectl edit deployment redis-deply --namespace=dev-ns
   41  kubectl get deployment --namespace=dev-ns
   42  vi red-dep.yaml 
   43  kubectl apply -f red-dep.yaml 
   44  kubectl get deployment --namespace=dev-ns
   45  kubectl run httpd --image=httpd:alpine --dry-run=client -o yaml > httpd-pod.yaml
   46  vi httpd-pod.yaml 
   47  kubectl apply -f httpd-pod.yaml 
   48  kubectl --help
   49  kubectl expose httpd --port=80
   50  kubectl get pods
   51  kubectl expose --help
   52  kubectl expose pod=httpd --port=80
   53  kubectl expose pod httpd --port=80
   54  history

--------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: redis-deply
  name: redis-deply
  namespace: dev-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis-deply
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis-deply
    spec:
      containers:
      - image: redis
        name: redis
        resources: {}
status: {}


----------------------------------------

PS C:\Users\sunil\OneDrive\Desktop\yakshayush\covid19india-react> kubectl scale --replicas=0  --help        
Set a new size for a Deployment, ReplicaSet, Replication Controller, or StatefulSet.

 Scale also allows users to specify one or more preconditions for the scale action.

 If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is
guaranteed that the precondition holds true when the scale is sent to the server.

Examples:
  # Scale a replicaset named 'foo' to 3.
  kubectl scale --replicas=3 rs/foo

  # Scale a resource identified by type and name specified in "foo.yaml" to 3.
  kubectl scale --replicas=3 -f foo.yaml

  # If the deployment named mysql's current size is 2, scale mysql to 3.
  kubectl scale --current-replicas=2 --replicas=3 deployment/mysql

  # Scale multiple replication controllers.
  kubectl scale --replicas=5 rc/foo rc/bar rc/baz

  # Scale statefulset named 'web' to 3.
  kubectl scale --replicas=3 statefulset/web


---------------------------------------------------------------------


vi kube-configMap.yaml
   17  kubectl get configmaps
   18  kubectl describe configmap webapp-config-map
   19  kubectl create configmap webapp-config-map1 --from-literal=APP_COLOR_darkblue
   20  kubectl create configmap webapp-config-map1 --from-literal=APP_COLOR=darkblue
   21  kubectl describe configmap webapp-config-map1
   22  kubectl edit configmap webapp-config-map
   23  kubectl get configmaps
   24  kubectl describe configmap webapp-config-map


------------------------------------------------

root@controlplane:~# history
    1  kubectl get secrets
    2  kubectl describe secrets default-token-bv8mx
    3  kubectl get secrets
    4  kubectl describe secret default-token-bv8mx
    5  kubectl get pods
    6  clear
    7  kubectl create --help
    8  kubectl create secret --help
    9  kubectl create secret db-secret --help
   10  kubectl create secret db-secret --from-literal=DB_HOST=sql01 --from-literal=DB_USER=root --from-literal=DB_PASSWORD=password123
   11  kubectl create secret generic db-secret --from-literal=DB_HOST=sql01 --from-literal=DB_USER=root --from-literal=DB_PASSWORD=password123
   12  kubectl get secrets
   13  kubectl describe secret db-secret
   14  kubectl edit secret db-secret
   15  kubectl describe secret db-secret
   16  kubectl edit secret db-secret
   17  kubectl describe secret db-secret
   18  ls
   19  vi sample.yaml 
   20  kubectl get pods
   21  kubectl edit pod webapp-pod
   22  vi sample.yaml 
   23  kubectl create -f sample.yaml 
   24  vi sample.yaml 
   25  kubectl create -f sample.yaml 
   26  vi sample.yaml 
   27  kubectl create -f sample.yaml 
   28  vi sample.yaml 
   29  kubectl create -f sample.yaml 
   30  vi sample.yaml 
   31  kubectl get pods
   32  kubectl delete pod webapp-pod
   33  kubectl create -f sample.yaml 
   34  clear
   35  kubectl get pods

---------------------------------------------------------------------------

root@controlplane:~# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
db-secret             Opaque                                3      20m
default-token-bv8mx   kubernetes.io/service-account-token   3      32m


-----------------------------------------------------------------------------

root@controlplane:~# kubectl describe secret db-secret
Name:         db-secret
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
DB_User:      4 bytes
DB_Host:      5 bytes
DB_Password:  11 bytes


--------------------------------------------------------------------------

anti affinity towards creating a pod on a particular node relates to node selector though nodeselector isn't as vast as antiaffinity in terms of operations and selections.

label a node and use the label in anti Affinity section of deployment.spec 

kubectl label node node01 color=blue


---------------------------------------------------

readiness probbe srcipt 

for i in {1..20}; do
   kubectl exec --namespace=kube-public curl -- sh -c 'test=`wget -qO- -T 2  http://webapp-service.default.svc.cluster.local:8080/ready 2>&1` && echo "$test OK" || echo "Failed"';
   echo ""

--------------------------------------------------------------

git clone https://github.com/kodekloudhub/kubernetes-metrics-server.git


-------------------------------------------

kubectl create deployment nginx --image=nginx
kubectl rollout restart nginx
kubectl rollout history deployment nginx
kubectl rollout undo deployment nginx
kubectl edit deployment nginx --record
kubectl set image deployment nginx nginx=nginx1:17 --record
  |-> 
    deployment.extensions/nginx image updated
    master $master $

    master $ kubectl rollout history deployment nginx
    deployment.extensions/nginx

    REVISION CHANGE-CAUSE
    1     <none>
    2     kubectl set image deployment nginx nginx=nginx:1.17 --record=true
    master $


  ----------------------------------helm------------------------------------------------


   1 mkdir charts
   2 cd .\charts\
   3 helm create example
   5 cd .\example\
   9 helm install
  10 helm install .\templates\deployment.yaml
  11 helm install .\templates\deployment.yaml --generate-name
  12 helm install test . --dry-run
  13 minikube.exe start
  14 helm install test . --dry-run
  15 helm install test .
  16 kubectl get pods
  17 kubectl get pods
  18 kubectl get pods
  19 kubectl get pods
  20 kubectl get deployments
  21 helm list -aq
  22 helm delete test
  23 kubectl get deployments